-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Федеральное государственное бюджетное образовательное учреждение высшего профессионального образования Новосибирский государственный технический университет

Название курса: «Информационные сети и коммуникации».
Название работы: «Лабораторная работа 5».
Название группы: АА-96.
Студент: Вдовин Владислав Андреевич.
Преподаватель: Колкер Алексей Борисович.
Дата 05.06.2022.
Цель работы: знакомство с особенностями создания серверных приложений на языке Си.

Ход работы:
В ходе данной работы было написано четыре приложения на языке Си, которые являются TCP-клиентами и TCP-серверами, каждый реализован как в сетях IPv4, так и в IPv6.
Вот листинг этих программ:



    1. Файл "lab5_time.c" - программа-сервер в сети IPv4.
#include <stdio.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h> 
#include <string.h>
#include <arpa/inet.h>

int main() {
    // Инициализируем необходимые переменные
    int bind_status, server_socket , client_socket , bytes, structlen = sizeof(struct sockaddr_in);
	struct sockaddr_in server_addr, client_addr;
    time_t rawtime;
	char message[1000];
	
	// Создаем сокет для сервера
	printf("Server socket creating...");
    server_socket = socket(AF_INET , SOCK_STREAM , 0);
    if (server_socket < 0) {
        printf("Cannot connect socket\n");
        return -1;
    }
    printf("OK\n");
	
	// Создаем адрес сервера
	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = INADDR_ANY;
	server_addr.sin_port = htons(12445);
	
	// Занимаем для сервера порт
    while(1) {
        printf("Binding socket and address...");
        bind_status = bind(server_socket, (struct sockaddr *)&server_addr , sizeof(server_addr));
        if (bind_status < 0) {
            printf("Cannot bind\n");
            sleep(4);
        } else break;
	} 
	printf("OK\n");

    // Включаем режим слушания эфира
    listen(server_socket , 1);
    
    // Выводим информацию о работе сервера
    printf("Server is waiting for connections...\n");
    
    // Принимаем поступающее соединение 
    client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &structlen);
    printf("There is connection request...");
    if (client_socket < 0) {
        printf("Cannot accept connetion\n");
        return -3;
    }
    printf("ACCEPTED, IP %s\n", inet_ntoa(client_addr.sin_addr));
    memset(message, 0, 1000);
    
    //Принимаем данные от клиента
    time(&rawtime);
    sprintf(message, "%d", rawtime);
    printf("Current time: %d\n", rawtime);
    write(client_socket , message , strlen(message));
    sleep(2);
    memset(message, 0, 1000);            
    bytes = recv(client_socket, message, 1000, 0);
    // Если пусто или ошибка, сразу выходим из цикла
    if (bytes > 0) {
        // Выводим сообщение от клиента
        printf("Received: %s\n", message);
    }
    
    if(bytes == 0) {
        printf("Client disconnected\n");
    } else if (bytes == -1) {
        printf("Cannot read incoming message correctly\n");
    }
	return 0;
}



    2. Файл "lab5_time_ipv6.c" - программа-сервер в сети IPv6.
#include <stdio.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <termios.h>
#include <fcntl.h>
#include <unistd.h> 
#include <string.h>
#include <arpa/inet.h>

void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET)
        return &(((struct sockaddr_in*)sa)->sin_addr);
    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

int main() {
    // Инициализируем необходимые переменные
    int bind_status, server_socket , client_socket , bytes, structlen = sizeof(struct sockaddr_in6);
	struct sockaddr_in6 server_addr, client_addr;
    char SENDER_ADDR[INET6_ADDRSTRLEN];
    time_t rawtime;
	char message[1000];
	
	// Создаем сокет для сервера
	printf("Server socket creating...");
    server_socket = socket(AF_INET6 , SOCK_STREAM , 0);
    if (server_socket < 0) {
        printf("Cannot connect socket\n");
        return -1;
    }
    printf("OK\n");
	
	// Создаем адрес сервера
	server_addr.sin6_family = AF_INET6;
	server_addr.sin6_addr = in6addr_any;
	server_addr.sin6_port = htons(12445);
	
	// Занимаем для сервера порт
    while(1) {
        printf("Binding socket and address...");
        bind_status = bind(server_socket, (struct sockaddr *)&server_addr , sizeof(server_addr));
        if (bind_status < 0) {
            printf("Cannot bind\n");
            sleep(4);
        } else break;
	} 
	printf("OK\n");

    // Включаем режим слушания эфира
    listen(server_socket , 1);
    
    // Выводим информацию о работе сервера
    printf("Server is waiting for connections...\n");
    
    // Принимаем поступающее соединение 
    client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &structlen);
    printf("There is connection request...");
    if (client_socket < 0) {
        printf("Cannot accept connetion\n");
        return -3;
    }
    inet_ntop(client_addr.sin6_family, get_in_addr((struct sockaddr *)&client_addr),SENDER_ADDR, sizeof SENDER_ADDR); 
    printf("ACCEPTED, IP %s\n", SENDER_ADDR);
    memset(message, 0, 1000);
    
    //Принимаем данные от клиента
    time(&rawtime);
    sprintf(message, "%d", rawtime);
    printf("Current time: %d\n", rawtime);
    write(client_socket , message , strlen(message));
    sleep(2);
    memset(message, 0, 1000);            
    bytes = recv(client_socket, message, 1000, 0);
    // Если пусто или ошибка, сразу выходим из цикла
    if (bytes > 0) {
        // Выводим сообщение от клиента
        printf("Received: %s\n", message);
    }
    
    if(bytes == 0) {
        printf("Client disconnected\n");
    } else if (bytes == -1) {
        printf("Cannot read incoming message correctly\n");
    }
	return 0;
}



    3. Файл "lab5_time_client.c" - программа-клиент в сети IPv4.
#include <stdio.h>	//printf
#include <string.h>	//strlen
#include <sys/socket.h>	//socket
#include <arpa/inet.h>	//inet_addr
#include <unistd.h>
#include <time.h>
#include <stdlib.h>

int main(int argc , char *argv[])
{
	int sock, server_time;
	struct sockaddr_in server;
    time_t rawtime;
	char message[1000] , server_reply[2000];
	
	//Create socket
	sock = socket(AF_INET , SOCK_STREAM , 0);
	if (sock == -1)
	{
		printf("Could not create socket");
	}
	puts("Socket created");
	
	server.sin_addr.s_addr = inet_addr("127.0.0.1");
	server.sin_family = AF_INET;
	server.sin_port = htons( 12445 );

	//Connect to remote server
	if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
	{
		perror("connect failed. Error");
		return 1;
	}
	
	puts("Connected\n");

    //Receive a reply from the server
    if( recv(sock , server_reply , 2000 , 0) < 0)
    {
        puts("recv failed");
        return -1;
    }

    time(&rawtime);
    printf("Answer from server: %ss\nCurrent time: %ds\n", server_reply, rawtime);
    
    server_time = atoi(server_reply);
    memset(message, 0, 1000);
    sprintf(message, "%d", server_time - rawtime);

    //Send some data
    if( send(sock , message , strlen(message) , 0) < 0)
    {
        puts("Send failed");
        return -2;
    }

    printf("Message %s sent successfully\n", message);
	
	close(sock);
	return 0;
}



    4. Файл "lab5_time_client_ipv6.c" - программа-клиент в сети IPv6.
#include <stdio.h>	//printf
#include <string.h>	//strlen
#include <sys/socket.h>	//socket
#include <arpa/inet.h>	//inet_addr
#include <unistd.h>
#include <time.h>
#include <stdlib.h>

int main(int argc , char *argv[])
{
	int sock, server_time;
	struct sockaddr_in6 server;
    time_t rawtime;
	char message[1000] , server_reply[2000];
	
	//Create socket
	sock = socket(AF_INET6 , SOCK_STREAM , 0);
	if (sock == -1)
	{
		printf("Could not create socket");
	}
	puts("Socket created");
	
	inet_pton(AF_INET6, "::1", &server.sin6_addr);
	server.sin6_family = AF_INET6;
	server.sin6_port = htons( 12445 );

	//Connect to remote server
	if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
	{
		perror("connect failed. Error");
		return 1;
	}
	
	puts("Connected\n");

    //Receive a reply from the server
    if( recv(sock , server_reply , 2000 , 0) < 0)
    {
        puts("recv failed");
        return -1;
    }

    time(&rawtime);
    printf("Answer from server: %ss\nCurrent time: %ds\n", server_reply, rawtime);
    
    server_time = atoi(server_reply);
    memset(message, 0, 1000);
    sprintf(message, "%d", server_time - rawtime);

    //Send some data
    if( send(sock , message , strlen(message) , 0) < 0)
    {
        puts("Send failed");
        return -2;
    }

    printf("Message %s sent successfully\n", message);
	
	close(sock);
	return 0;
}

Выводы о работе: Ознакомился с особенностями создания серверных приложений на языке Си. 
Написал клиентское и серверное приложения в IPv4 и IPv6, задача которых сводится к
обмену данными о текущем времени.
 
Приложение: файл lab5.zip, 4 326 bytes, 5 июн 2022.
-----BEGIN PGP SIGNATURE-----

iQGzBAEBCAAdFiEElLjLXNzA6zqFR0JEYgbm2alZeaMFAmKcv5QACgkQYgbm2alZ
eaP6Vwv/YL+Lh6e+Y2MZJCuNDK3pSgkkvRn4MQpGNXqIF5lqr2gQOA4VOxLYFpZE
YjVQGvyv0r9uDVLhUPy3Ibony7meD2gi+GP3pCHF/pP6p4gXT8hc6eb9bxzGq8lU
X+QLeTqSqkf8b8RyWhd2Bn1+Vl97OZycKUSAKZmkU4uZVsXmHwRaNZU1jG988gw7
RQAnMSt+PHiS53TP8S8N6MjVjyF5LkerNsUbltua6SmRHIcVrQJVJsx808MFU5Kz
1P/AeNZR+Kowy+KluMBhKP/p9F0p2a8ahXb7JZzYcxnl0xh8bpTnn+EFNWbVJPOi
MKWIicvb4cl5vc+hcrpltDkO0f+oSYL6dM3PUqwQZNM87HXPr6FY5H1RxV0CZZin
103vO+2HG8QmqS7Rw4nJ1UQazJbBxvY3ov0MC2jQ1lsD9Ft086D4NNkMltq5f+xU
63RUyoWNXnZOS/3zKB6cDUKNvXTAeJUjBsOrl7G+KzFPon6cxClRWiNkxz4aWhsH
tnrDPjnk
=z8Jm
-----END PGP SIGNATURE-----
